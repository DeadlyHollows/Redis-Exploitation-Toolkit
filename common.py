# Contains common functions used by both automated and interactive modes.
from importlib import import_module



def list_available_items(items):

    idx = 1
    for item in items:
        if isinstance(item, dict):
            print (f"{idx} - {list(item.keys())[0]}")
        else:
            print (f"{idx} - {item}")
        idx += 1

    # If we iterate, only then print a newline
    # else it just adds extra newlines which is
    # not required.
    if idx != 1:
        print ()



def list_available_general_commands(with_header = True):

    if with_header:
        print ("\n[*] Available general commands:")

    print ("- help")
    print ("- info / list")
    print ("- run / exploit")
    print ("- shell / sh")
    print ("- redis-shell / rsh")
    print ("- back <N> / up <N>")
    print ("- reset\n")



# Handles the remaining commands specified after the module/sub-module/attack path.
def handle_ret_framework_commands(commands, attack_path, available_attack_paths = []):

            # Possibilities:
            # - help
            # - info / list
            # - run / exploit
            # - invalid command!

            # print ("commands:", commands)
            # print ("attack_path:", attack_path)

            extra_cmds_count = len(commands)

            if extra_cmds_count == 0:
                # No extra commands specified...
                list_available_general_commands()

            elif extra_cmds_count == 1:
                # handle_ret_framework_command()
                cmd = commands[0]

                if cmd in [ "run", "exploit" ]:
                    # Launch the exploit module...
                    getattr(import_module("modules." + ".".join(attack_path[:-1])),
                            attack_path[-1])()

                elif cmd == "help":
                    # Help command

                    # Show help on the selected module/sub-module/attack

                    # Contains list of available modules/commands as well
                    if not available_attack_paths:
                        list_available_general_commands()
                    else:
                        list_available_items(available_attack_paths)

                elif cmd == "info":
                    # Info command

                    # Show info on the selected module/sub-module/attack
                    pass

                elif cmd == "list":
                    # List command
                    if not available_attack_paths:
                        list_available_general_commands()
                    else:
                        list_available_items(available_attack_paths)

                else:
                    # Invalid command
                    print (f"\n[-] Invalid command: {cmd}")
                    list_available_general_commands()


            else:
                # Probably extra commands are specified...
                print (f"[-] Expected zero/one commands, got {extra_cmds_count}: ",
                        " ".join(commands))

                list_available_general_commands()