from importlib import import_module
from sys import exit



def get_automated_attack_sequence():
    return ["enum", "exec", "module_load"]



def launch_in_automated_mode():

    # 1 - Run the enum attacks
    # 2 - Run the exec attack
    # 3 - Run module load attack

    print ("\n[INFO] Press CTRL+C to skip an attack...")
    print ("[INFO] Press CTRL+D to stop the tool...")

    for attack_module in get_automated_attack_sequence():
        for attack in getattr(import_module(f"modules.{attack_module}"), "AVAILABLE_ATTACKS")[attack_module]:
            # print ("attack:", attack)
            if isinstance(attack, dict):
                # enum
                for sub_attack in attack:
                    # print (sub_attack, attack[sub_attack])
                    for sub_sub_attack in attack[sub_attack]:
                        print (f"\n=====> Performing '{attack_module}/{sub_sub_attack}/{sub_sub_attack}' attack <=====")
                        try:
                            getattr(import_module(f"modules.{attack_module}.{sub_attack}"), sub_sub_attack)()
                        except KeyboardInterrupt:
                            print ("\n\nSkipping this attack...")
                        except EOFError:
                            print ("\n\nExiting...")
                            exit(-1)

            else:
                print (f"\n=====> Performing '{attack_module}/{attack}' attack <=====")
                # print (attack)
                try:
                    getattr(import_module(f"modules.{attack_module}.{attack_module}"), f"perform_{attack_module}_attack")(attack)
                except KeyboardInterrupt:
                    print ("\n\nSkipping this attack...")
                except EOFError:
                    print ("\n\nExiting...")

        print ("\n[===========================================================================================]")



if __name__ == "__main__":
    launch_in_automated_mode()