import argparse
from os.path import dirname, realpath
from helper.utils import get_tool_banner



def positive_float(value):
    ivalue = float(value)
    if ivalue < 0:
        raise argparse.ArgumentTypeError(f"{value} is not a valid inter attack delay value")
    return ivalue



if __name__ == "__main__":

    parser = argparse.ArgumentParser(prog = "ret",
        description = "Redis Exploitation Toolkit")

    parser.add_argument("-s", "--host", action = "store",
                        dest = "redis_server_hostname", default = "127.0.0.1",
                        help = "Redis Server Hostname/IP (default: 127.0.0.1)")

    parser.add_argument("-p", "--port", action = "store", type = int,
                        dest = "redis_server_port", default = 6379,
                        help = "Redis Server Port (default: 6379)")

    parser.add_argument("-U", "--user", action = "store",
                        dest = "redis_user", default = "default",
                        help = "Redis User (default: 'default')")

    parser.add_argument("-P", "--pass", action = "store",
                        dest = "redis_user_password", default = "",
                        help = "Redis User Password (default: '')")

    parser.add_argument("-q", "--quiet", action = "store_true",
                        dest = "quiet", default = False,
                        help = "Do not show the tool banner")

    parser.add_argument("-y", "--assume-defaults", action = "store_true",
                        dest = "assume_defaults", default = False,
                        help = "Assume the default option for the answers " \
                            "requested by the tool (default: False)")

    parser.add_argument("-seq", "--attack-sequence-file", type = str,
                        dest = "attack_sequence_file",
                        default = dirname(realpath(__file__)) + "/" + \
                            "./sequence.json",
                        help = "For 'mode=auto', specify the file containing " \
                            "the sequence of attacks to be launched " \
                            "(default: './sequence.json')")

    parser.add_argument("-d", "--delay", type = positive_float,
                        dest = "inter_attack_delay", default = 0.7,
                        help = "Delay (in seconds) between the attacks in " \
                            "auto mode (default: 0.3)")

    parser.add_argument("-v", "--verbose", dest = "verbose",
                        action = "store_true", default = False,
                        help = "Enable verbose mode (default: False)")


    interactive_group = parser.add_mutually_exclusive_group()

    interactive_group.add_argument("-i", "--interactive", dest = "interactive_mode",
                        action = "store_true", default = False,
                        help = "Run in interactive mode (default: False)")

    interactive_group.add_argument("-a", "--auto", dest = "automated_mode",
                        action = "store_true", default = False,
                        help = "Run in automated mode (default: False)")


    args = parser.parse_args()

    from config import settings

    settings.connection_options["host"] = args.redis_server_hostname
    settings.connection_options["port"] = args.redis_server_port
    settings.connection_options["username"] = args.redis_user
    settings.connection_options["password"] = args.redis_user_password

    settings.ATTACK_SEQUENCE_FILE = args.attack_sequence_file
    settings.ASSUME_DEFAULTS = args.assume_defaults
    settings.INTER_ATTACK_DELAY = args.inter_attack_delay

    settings.VERBOSE = args.verbose


    if not args.quiet:
        print(get_tool_banner())

    print("\n[*] Target Information:")
    print("HOST:", f"\"{settings.connection_options['host']}\"")
    print("PORT:", settings.connection_options["port"])
    print("USERNAME:", f"\"{settings.connection_options['username']}\"")
    print("PASSWORD:", f"\"{settings.connection_options['password']}\"")

    if args.automated_mode:
        # Run in automated mode.
        # This will run all the attacks in a sequential fashion.
        # The sequence has to be well-thought and must be a natural
        # progression...

        from automated import launch_in_automated_mode
        launch_in_automated_mode()

    else:
        # Run in interactive mode - that will always be the default case...
        from interactive import launch_in_interactive_mode
        launch_in_interactive_mode()