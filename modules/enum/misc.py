import sys
# setting path
sys.path.insert(0, "../../../")

from helper.connection import proceed_with_cached_connection


AVAILABLE_ATTACKS = [
    "monitor_server_commands"
]



def monitor_server_commands_help():
    return "\nReturns (in a streaming fashion) the commands\n" \
    "sent to the Redis server by other Redis clients.\n\n" \
    "Since the ACL commands don't show up in the Redis\n" \
    "logs, and AUTH commands are logged but the password\n" \
    "or the credentials are redacted, nothing can be\n" \
    "done about that!\n\n" \
    "Make sure that this command blocks the client and\n" \
    "the server throughput is also reduced significantly.\n" \
    "Using this command can be noisy!\n"



def monitor_server_commands():

    print ("\n[WARNING] Running this command with block the client and reduce server throughput as well!")

    proceed = input("\nDo you still wish to continue? (default='no') [y/N] ") or "N"

    if proceed.lower() != "y":
        print ()
        return

    redis = proceed_with_cached_connection()

    print ("\n[*] Commands received by the Redis Server:\n")
    print ("Press CTRL+C to exit...\n")

    with redis.monitor() as monitor_obj:
        try:
            for command in monitor_obj.listen():
                print (command)
        except KeyboardInterrupt as e:
            return



def get_available_attacks():
    return AVAILABLE_ATTACKS



def perform_misc_attack(attack_name):
    if attack_name in AVAILABLE_ATTACKS:
        globals()[attack_name]()
    else:
        print ("\n[-] Invalid attack name.\n")



if __name__ == "__main__":
    monitor_server_commands()