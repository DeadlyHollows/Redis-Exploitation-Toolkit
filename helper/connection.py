import redis
from redis.exceptions import AuthenticationError, ResponseError

from .errormap import *



CONNECTION_OPTIONS = {}



def get_cached_connection_options():
    return CONNECTION_OPTIONS



def cache_connection_options(opts):

    global CONNECTION_OPTIONS
    CONNECTION_OPTIONS = opts
    return True



def get_db_connection(opts = {}, auth = False):

    if not opts:
        from config.settings import connection_options
        opts = connection_options

    cache_connection_options(opts)

    if auth:
        return redis.from_url(f"redis://{opts['username']}:{opts['password']}@{opts['host']}:{opts['port']}", decode_responses = True)

    else:
        return redis.Redis(**opts, decode_responses = True)



REDIS = get_db_connection()



def get_cached_db_connection():
    return REDIS



def cache_db_connection(redis):

    global REDIS
    REDIS = redis
    print("\n[INFO] Redis client cached succcessfully!\n")
    return True



def proceed_with_cached_connection():

    proceed = input("\nContinue with the last cached credentials? (default='yes') [y/N] ") or "y"

    if proceed.lower() == "n":

        username = input("username: ").strip()
        password = input("password: ").strip()

        opts = get_cached_connection_options()

        opts["username"] = username
        opts["password"] = password

        redis = get_db_connection(opts, auth = True)

        proceed = input("\nWant to cache this connection? (default='yes') [y/N] ") or "y"

        if proceed.lower() != "n":
            cache_db_connection(redis)
            cache_connection_options(opts)
            print ("Cached the connection...")

    else:
        print ("Continuing with cached credentials...")
        redis = get_cached_db_connection()

    return redis



def is_connection_working(redis):
    # Checks if the connection to the redis server
    # works or not

    conn_status = None

    # For that, we are using the PING command
    try:
        conn_status = redis.ping()

        if conn_status == True:
            conn_status = E_OK

    except ConnectionError as e:
        print (e)
        # No connection to Redis
        # Is it even running?
        # If yes, then is it running on the specified port?
        conn_status = ENO_CONN

    except AuthenticationError as e:
        # print (e)
        # TODO make it more dynamic (verifying the errors from messages)
        # if "NOAUTH" in str(e):
        # Authentication is required.
        conn_status = ENO_AUTH

    except ResponseError as e:
        print (e)
        # Either the credentials are invalid
        # Or the user is disabled!
        conn_status = ENO_INVALID_CREDS | ENO_USER_DISABLED

    return conn_status