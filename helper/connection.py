import redis
from redis.exceptions import AuthenticationError, ResponseError

from config.settings import ASSUME_DEFAULTS
from .errormap import *



CONNECTION_OPTIONS = {}



def get_cached_connection_options():
    return CONNECTION_OPTIONS



def cache_connection_options(opts):

    global CONNECTION_OPTIONS
    CONNECTION_OPTIONS = opts
    return True



def get_db_connection(opts = {}):

    if not opts:
        from config.settings import connection_options
        opts = connection_options

    cache_connection_options(opts)

    username = opts["username"]
    password = opts["password"]
    host = opts["host"]
    port = opts["port"]

    if username == "default" and password == "":
        return redis.Redis(**opts)
    else:
        return redis.from_url(f"redis://{username}:{password}@{host}:{port}",
                decode_responses = True)



REDIS = [get_db_connection()]



def get_cached_db_connection(idx = 0):
    return REDIS[idx]



def get_next_cached_db_conntection(prev_conn):
    if prev_conn == None:
        return get_cached_db_connection()

    try:
        idx = REDIS.index(prev_conn)

        if idx == (len(REDIS) - 1):
            # it's the last conn
            return None

        return get_cached_db_connection(idx + 1)

    except ValueError as e:
        # prev_conn not in the cached connections
        print(e)
        return None



def cache_db_connection(redis):

    global REDIS
    REDIS.insert(0, redis)
    print("\n[INFO] Redis client cached succcessfully!\n")
    return True



def proceed_with_cached_connection():

    assume_defaults = ASSUME_DEFAULTS

    proceed = "y"

    if not assume_defaults:
        proceed = input("\nContinue with the last cached credentials? (default='yes') [y/N] ") or proceed

    if proceed.lower() == "n":

        username = "default"
        password = ""

        if not assume_defaults:
            username = input("username (default='default'): ").strip() or username
            password = input("password (default=''): ").strip() or password

        opts = get_cached_connection_options()

        opts["username"] = username
        opts["password"] = password

        redis = get_db_connection(opts)

        proceed = "y"

        if not assume_defaults:
            proceed = input("\nWant to cache this connection? (default='yes') [y/N] ") or proceed

        if proceed.lower() != "n":
            cache_db_connection(redis)
            cache_connection_options(opts)
            print("Cached the connection...")

    else:
        if not assume_defaults:
            print("\n[*] Continuing with cached credentials")
        redis = get_cached_db_connection()

    return redis



def is_connection_working(redis):
    # Checks if the connection to the redis server
    # works or not

    conn_status = None

    # For that, we are using the PING command
    try:
        conn_status = redis.ping()

        if conn_status == True:
            conn_status = E_OK

    except ConnectionError as e:
        print(e)
        # No connection to Redis
        # Is it even running?
        # If yes, then is it running on the specified port?
        conn_status = ENO_CONN

    except AuthenticationError as e:
        # Authentication is required.
        # print(e)
        conn_status = ENO_AUTH

    except ResponseError as e:
        # Either the credentials are invalid
        # Or the user is disabled!
        # print(e)
        conn_status = ENO_INVALID_CREDS | ENO_USER_DISABLED

    return conn_status




def get_connection_info(conn):
    return conn.connection_pool.connection_kwargs